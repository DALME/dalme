{"remainingRequest":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/primevue/components/datatable/DataTable.vue?vue&type=template&id=4f14e471&","dependencies":[{"path":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/primevue/components/datatable/DataTable.vue","mtime":499162500000},{"path":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gabep/Repos/DALME-Online-Database/dalme_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}